# coding:utf-8
from __future__ import print_function # using Python3 print for lambda, forward compatibility
from easy_crypt import EasyCrypt as ec

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='This is a python encrypter using AES-256-CBC algorithm of openssl.')
	parser.add_argument('-d', type=str, help='Decrypt .enc file with password')
	parser.add_argument('-e', type=str, help='Encrypt specified file to .enc file. This function does not record your password. Do not forget it.')
	parser.add_argument('-dt', type=str, help='Decrypt .enc file to text file.')
	parser.add_argument('-et', type=str, help='Encrypt specified text file to .enc file and record your password inside the text file.')
	parser.add_argument('-dd', type=str, help='Decrypt .zip.enc file to a directory.')
	parser.add_argument('-ed', type=str, help='Encrypt directory by zipping and encrypt to .zip.enc file.')
	parser.add_argument('-g', action='store_true', help='Generate random password.')
	args = parser.parse_args()
	# if using debug mode in python
	if sys.flags.debug: print(args)
	pass_header = '# This line is auto-generated by easy_crypt.py . Master Password: '
	
	if args.g:
		print(ec.gen_rnd_pswd())
	elif args.d != None:
		ec.path_exists_or_exit(args.d)
		ec.decrypt_txt_file(args.d)
	elif args.e != None:
		ec.path_exists_or_exit(args.e)
		with open(args.e, 'r') as raw_file:
			raw_header = raw_file.readline()
		if raw_header.startswith(pass_header):
			# already master password is confirmed
			# erace pass_header and whitespace then strip the password
			master_pswd = raw_header.replace(pass_header, '').replace(' ', '').rstrip()
		else:
			# if there is no master password, make user to input new one
			master_pswd = confirm_pswd_print()
			with open(args.e, 'r') as raw_file:
				raw_file_data = raw_file.readlines()
			# add master password to the top of file 
			raw_file_data.insert(0, pass_header + master_pswd + os.linesep)
			with open(args.e, 'w') as raw_file:
				raw_file.write(str.join('', raw_file_data))
		encrypt_file(args.e, master_pswd)
	else:
		print('No arguments! Input -h or --help flag for help.')
